//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/InputSetting/IngameInput/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""fa86afc5-5ecc-4557-86c1-0f490ab9fce7"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""080189f8-a56c-443e-a503-ba208a1f092a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseLook"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c8577ffc-40be-48ec-84bf-35304e8750a3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""d1c96a83-d338-4a5d-b227-b0bf7761a393"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""9021d024-ffe9-4f0e-bd8e-7bee2e67a35c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""d4df06e5-b471-477a-b7a0-b300abbb923c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Guard"",
                    ""type"": ""Button"",
                    ""id"": ""9887a2c7-8de4-4357-9bf9-eee48595c780"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Light"",
                    ""type"": ""Button"",
                    ""id"": ""52c5011e-0ab5-422c-b4e9-2213fc1260a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenOptionUI"",
                    ""type"": ""Button"",
                    ""id"": ""89b2ba1a-a004-493f-b825-71413088ac56"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenPlayUI"",
                    ""type"": ""Button"",
                    ""id"": ""5724f6ee-d83d-4d67-81f0-c9bea33a083f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenMapUI"",
                    ""type"": ""Button"",
                    ""id"": ""7d549093-c8b6-4c9e-8935-087dce1a6fa1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenQuestUI"",
                    ""type"": ""Button"",
                    ""id"": ""b39faca6-cd18-42f0-8a4e-ebb4a6c00f17"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ThrowItem"",
                    ""type"": ""Button"",
                    ""id"": ""bf8164d9-3f79-49bc-bcf5-984d537d88c1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""65dbfeef-9427-45f7-ac24-e278a6e66aae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Power1"",
                    ""type"": ""Button"",
                    ""id"": ""3ae140a4-adb1-4018-86d4-e5945cb7a05f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Power2"",
                    ""type"": ""Button"",
                    ""id"": ""f417c2d3-218c-4ae5-9ffc-8e70a7dcde89"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Power3"",
                    ""type"": ""Button"",
                    ""id"": ""16fc49bb-3287-4a68-9ef7-99be87cfa516"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HealItem"",
                    ""type"": ""Button"",
                    ""id"": ""65a7252b-9314-46dc-a3d1-f0c811390b38"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""KeyBoard"",
                    ""id"": ""fdd2c10f-9fa8-4c21-b97f-5ba958a7bb69"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5993ec2a-4394-4020-8be9-8634bb75daba"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9e7aa558-b011-4b44-9d63-2bcf2a4b314c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""114ae9f1-1e12-42d4-9ecd-d88e5dfec026"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""10b4bfbc-0db6-49ea-a24c-01f1ac157914"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""27c14269-b8e5-4c78-acd2-ec3199b8d913"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""MouseLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08ba29bf-9944-48cc-bf24-cf4de35aa4cf"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d873659-a599-4569-b882-a95de2c7ae02"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""14850530-f1d4-443f-a891-c7d940c8fa29"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Guard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""925f9823-8a9c-440f-b47c-52d717c25be1"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Light"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""532aee90-9c12-4c21-a9e8-546576b495e0"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenOptionUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b7f57654-4502-46c4-a748-fa88f782321e"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenPlayUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3a83ee5f-8dfa-4348-949d-6bb9cb66b5a2"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThrowItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48d32381-e556-4cda-a4d8-86482348924a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b30603c-5d9c-4ff6-950f-4a4864efe35a"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Power1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""26a1c7ea-9f9c-4564-8202-1a2568e86bfc"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Power2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c06111d-79e1-4a1d-a54e-738d3574f022"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Power3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""21829ae5-e3dd-4a5e-b5aa-f209369ae1fa"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenMapUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""074c1435-814a-42a0-a5e4-55e37e8ba69c"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""117f0f02-3a71-4c5f-b762-8e5169ad6704"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HealItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78fe657d-eab2-404b-ace0-6d0df07ea029"",
                    ""path"": ""<Keyboard>/semicolon"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenQuestUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UIControl"",
            ""id"": ""33b37d18-2f05-4a69-acbf-ad3a45f9c6ee"",
            ""actions"": [
                {
                    ""name"": ""CloseUI"",
                    ""type"": ""Button"",
                    ""id"": ""90f52c26-b3a2-4b67-a43b-576c43da608c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ClosePlayerUI"",
                    ""type"": ""Button"",
                    ""id"": ""f101f858-9e53-48c8-8809-172cdbb08024"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UIInteract"",
                    ""type"": ""Button"",
                    ""id"": ""e16a5c3c-ed05-40f8-bb92-302fe12162d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a37c6426-e2f6-44c7-9081-bb91534264df"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eae65500-2935-4502-8e6c-267f60a0daa8"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClosePlayerUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f0f3bbe3-4bc1-43ac-a122-4d66501474d2"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UIInteract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_MouseLook = m_Player.FindAction("MouseLook", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Roll = m_Player.FindAction("Roll", throwIfNotFound: true);
        m_Player_Attack = m_Player.FindAction("Attack", throwIfNotFound: true);
        m_Player_Guard = m_Player.FindAction("Guard", throwIfNotFound: true);
        m_Player_Light = m_Player.FindAction("Light", throwIfNotFound: true);
        m_Player_OpenOptionUI = m_Player.FindAction("OpenOptionUI", throwIfNotFound: true);
        m_Player_OpenPlayUI = m_Player.FindAction("OpenPlayUI", throwIfNotFound: true);
        m_Player_OpenMapUI = m_Player.FindAction("OpenMapUI", throwIfNotFound: true);
        m_Player_OpenQuestUI = m_Player.FindAction("OpenQuestUI", throwIfNotFound: true);
        m_Player_ThrowItem = m_Player.FindAction("ThrowItem", throwIfNotFound: true);
        m_Player_Interact = m_Player.FindAction("Interact", throwIfNotFound: true);
        m_Player_Power1 = m_Player.FindAction("Power1", throwIfNotFound: true);
        m_Player_Power2 = m_Player.FindAction("Power2", throwIfNotFound: true);
        m_Player_Power3 = m_Player.FindAction("Power3", throwIfNotFound: true);
        m_Player_HealItem = m_Player.FindAction("HealItem", throwIfNotFound: true);
        // UIControl
        m_UIControl = asset.FindActionMap("UIControl", throwIfNotFound: true);
        m_UIControl_CloseUI = m_UIControl.FindAction("CloseUI", throwIfNotFound: true);
        m_UIControl_ClosePlayerUI = m_UIControl.FindAction("ClosePlayerUI", throwIfNotFound: true);
        m_UIControl_UIInteract = m_UIControl.FindAction("UIInteract", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_MouseLook;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Roll;
    private readonly InputAction m_Player_Attack;
    private readonly InputAction m_Player_Guard;
    private readonly InputAction m_Player_Light;
    private readonly InputAction m_Player_OpenOptionUI;
    private readonly InputAction m_Player_OpenPlayUI;
    private readonly InputAction m_Player_OpenMapUI;
    private readonly InputAction m_Player_OpenQuestUI;
    private readonly InputAction m_Player_ThrowItem;
    private readonly InputAction m_Player_Interact;
    private readonly InputAction m_Player_Power1;
    private readonly InputAction m_Player_Power2;
    private readonly InputAction m_Player_Power3;
    private readonly InputAction m_Player_HealItem;
    public struct PlayerActions
    {
        private @InputSystem m_Wrapper;
        public PlayerActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @MouseLook => m_Wrapper.m_Player_MouseLook;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @Roll => m_Wrapper.m_Player_Roll;
        public InputAction @Attack => m_Wrapper.m_Player_Attack;
        public InputAction @Guard => m_Wrapper.m_Player_Guard;
        public InputAction @Light => m_Wrapper.m_Player_Light;
        public InputAction @OpenOptionUI => m_Wrapper.m_Player_OpenOptionUI;
        public InputAction @OpenPlayUI => m_Wrapper.m_Player_OpenPlayUI;
        public InputAction @OpenMapUI => m_Wrapper.m_Player_OpenMapUI;
        public InputAction @OpenQuestUI => m_Wrapper.m_Player_OpenQuestUI;
        public InputAction @ThrowItem => m_Wrapper.m_Player_ThrowItem;
        public InputAction @Interact => m_Wrapper.m_Player_Interact;
        public InputAction @Power1 => m_Wrapper.m_Player_Power1;
        public InputAction @Power2 => m_Wrapper.m_Player_Power2;
        public InputAction @Power3 => m_Wrapper.m_Player_Power3;
        public InputAction @HealItem => m_Wrapper.m_Player_HealItem;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @MouseLook.started += instance.OnMouseLook;
            @MouseLook.performed += instance.OnMouseLook;
            @MouseLook.canceled += instance.OnMouseLook;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Roll.started += instance.OnRoll;
            @Roll.performed += instance.OnRoll;
            @Roll.canceled += instance.OnRoll;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Guard.started += instance.OnGuard;
            @Guard.performed += instance.OnGuard;
            @Guard.canceled += instance.OnGuard;
            @Light.started += instance.OnLight;
            @Light.performed += instance.OnLight;
            @Light.canceled += instance.OnLight;
            @OpenOptionUI.started += instance.OnOpenOptionUI;
            @OpenOptionUI.performed += instance.OnOpenOptionUI;
            @OpenOptionUI.canceled += instance.OnOpenOptionUI;
            @OpenPlayUI.started += instance.OnOpenPlayUI;
            @OpenPlayUI.performed += instance.OnOpenPlayUI;
            @OpenPlayUI.canceled += instance.OnOpenPlayUI;
            @OpenMapUI.started += instance.OnOpenMapUI;
            @OpenMapUI.performed += instance.OnOpenMapUI;
            @OpenMapUI.canceled += instance.OnOpenMapUI;
            @OpenQuestUI.started += instance.OnOpenQuestUI;
            @OpenQuestUI.performed += instance.OnOpenQuestUI;
            @OpenQuestUI.canceled += instance.OnOpenQuestUI;
            @ThrowItem.started += instance.OnThrowItem;
            @ThrowItem.performed += instance.OnThrowItem;
            @ThrowItem.canceled += instance.OnThrowItem;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Power1.started += instance.OnPower1;
            @Power1.performed += instance.OnPower1;
            @Power1.canceled += instance.OnPower1;
            @Power2.started += instance.OnPower2;
            @Power2.performed += instance.OnPower2;
            @Power2.canceled += instance.OnPower2;
            @Power3.started += instance.OnPower3;
            @Power3.performed += instance.OnPower3;
            @Power3.canceled += instance.OnPower3;
            @HealItem.started += instance.OnHealItem;
            @HealItem.performed += instance.OnHealItem;
            @HealItem.canceled += instance.OnHealItem;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @MouseLook.started -= instance.OnMouseLook;
            @MouseLook.performed -= instance.OnMouseLook;
            @MouseLook.canceled -= instance.OnMouseLook;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Roll.started -= instance.OnRoll;
            @Roll.performed -= instance.OnRoll;
            @Roll.canceled -= instance.OnRoll;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Guard.started -= instance.OnGuard;
            @Guard.performed -= instance.OnGuard;
            @Guard.canceled -= instance.OnGuard;
            @Light.started -= instance.OnLight;
            @Light.performed -= instance.OnLight;
            @Light.canceled -= instance.OnLight;
            @OpenOptionUI.started -= instance.OnOpenOptionUI;
            @OpenOptionUI.performed -= instance.OnOpenOptionUI;
            @OpenOptionUI.canceled -= instance.OnOpenOptionUI;
            @OpenPlayUI.started -= instance.OnOpenPlayUI;
            @OpenPlayUI.performed -= instance.OnOpenPlayUI;
            @OpenPlayUI.canceled -= instance.OnOpenPlayUI;
            @OpenMapUI.started -= instance.OnOpenMapUI;
            @OpenMapUI.performed -= instance.OnOpenMapUI;
            @OpenMapUI.canceled -= instance.OnOpenMapUI;
            @OpenQuestUI.started -= instance.OnOpenQuestUI;
            @OpenQuestUI.performed -= instance.OnOpenQuestUI;
            @OpenQuestUI.canceled -= instance.OnOpenQuestUI;
            @ThrowItem.started -= instance.OnThrowItem;
            @ThrowItem.performed -= instance.OnThrowItem;
            @ThrowItem.canceled -= instance.OnThrowItem;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Power1.started -= instance.OnPower1;
            @Power1.performed -= instance.OnPower1;
            @Power1.canceled -= instance.OnPower1;
            @Power2.started -= instance.OnPower2;
            @Power2.performed -= instance.OnPower2;
            @Power2.canceled -= instance.OnPower2;
            @Power3.started -= instance.OnPower3;
            @Power3.performed -= instance.OnPower3;
            @Power3.canceled -= instance.OnPower3;
            @HealItem.started -= instance.OnHealItem;
            @HealItem.performed -= instance.OnHealItem;
            @HealItem.canceled -= instance.OnHealItem;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // UIControl
    private readonly InputActionMap m_UIControl;
    private List<IUIControlActions> m_UIControlActionsCallbackInterfaces = new List<IUIControlActions>();
    private readonly InputAction m_UIControl_CloseUI;
    private readonly InputAction m_UIControl_ClosePlayerUI;
    private readonly InputAction m_UIControl_UIInteract;
    public struct UIControlActions
    {
        private @InputSystem m_Wrapper;
        public UIControlActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @CloseUI => m_Wrapper.m_UIControl_CloseUI;
        public InputAction @ClosePlayerUI => m_Wrapper.m_UIControl_ClosePlayerUI;
        public InputAction @UIInteract => m_Wrapper.m_UIControl_UIInteract;
        public InputActionMap Get() { return m_Wrapper.m_UIControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIControlActions set) { return set.Get(); }
        public void AddCallbacks(IUIControlActions instance)
        {
            if (instance == null || m_Wrapper.m_UIControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIControlActionsCallbackInterfaces.Add(instance);
            @CloseUI.started += instance.OnCloseUI;
            @CloseUI.performed += instance.OnCloseUI;
            @CloseUI.canceled += instance.OnCloseUI;
            @ClosePlayerUI.started += instance.OnClosePlayerUI;
            @ClosePlayerUI.performed += instance.OnClosePlayerUI;
            @ClosePlayerUI.canceled += instance.OnClosePlayerUI;
            @UIInteract.started += instance.OnUIInteract;
            @UIInteract.performed += instance.OnUIInteract;
            @UIInteract.canceled += instance.OnUIInteract;
        }

        private void UnregisterCallbacks(IUIControlActions instance)
        {
            @CloseUI.started -= instance.OnCloseUI;
            @CloseUI.performed -= instance.OnCloseUI;
            @CloseUI.canceled -= instance.OnCloseUI;
            @ClosePlayerUI.started -= instance.OnClosePlayerUI;
            @ClosePlayerUI.performed -= instance.OnClosePlayerUI;
            @ClosePlayerUI.canceled -= instance.OnClosePlayerUI;
            @UIInteract.started -= instance.OnUIInteract;
            @UIInteract.performed -= instance.OnUIInteract;
            @UIInteract.canceled -= instance.OnUIInteract;
        }

        public void RemoveCallbacks(IUIControlActions instance)
        {
            if (m_Wrapper.m_UIControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIControlActions instance)
        {
            foreach (var item in m_Wrapper.m_UIControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIControlActions @UIControl => new UIControlActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnMouseLook(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnGuard(InputAction.CallbackContext context);
        void OnLight(InputAction.CallbackContext context);
        void OnOpenOptionUI(InputAction.CallbackContext context);
        void OnOpenPlayUI(InputAction.CallbackContext context);
        void OnOpenMapUI(InputAction.CallbackContext context);
        void OnOpenQuestUI(InputAction.CallbackContext context);
        void OnThrowItem(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnPower1(InputAction.CallbackContext context);
        void OnPower2(InputAction.CallbackContext context);
        void OnPower3(InputAction.CallbackContext context);
        void OnHealItem(InputAction.CallbackContext context);
    }
    public interface IUIControlActions
    {
        void OnCloseUI(InputAction.CallbackContext context);
        void OnClosePlayerUI(InputAction.CallbackContext context);
        void OnUIInteract(InputAction.CallbackContext context);
    }
}
